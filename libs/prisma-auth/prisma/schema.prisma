generator client {
    provider = "prisma-client-js"
    // output   = "../../node_modules/.prisma/prisma-auth" // або dist/libs/prisma-auth/generated (бажано)
    output   = "../../../node_modules/@internal/prisma-auth-client" 
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    CLIENT
    SPECIALIST
    ADMIN
}

enum UserStatus {
    PENDING
    ACTIVE
    SUSPENDED
    DEACTIVATED
}

model User {
    id       String     @id @default(cuid())
    email    String     @unique
    password String
    role     UserRole   @default(CLIENT)
    status   UserStatus @default(PENDING)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    sessions          Session[]
    emailVerification EmailVerification?
    passwordReset     PasswordReset?
}

model Session {
    id           String   @id @default(cuid())
    userId       String
    refreshToken String   @unique
    userAgent    String?
    ipAddress    String?
    expiresAt    DateTime
    createdAt    DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model EmailVerification {
    id        String   @id @default(cuid())
    userId    String   @unique
    token     String   @unique
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordReset {
    id        String   @id @default(cuid())
    userId    String   @unique
    token     String   @unique
    expiresAt DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
