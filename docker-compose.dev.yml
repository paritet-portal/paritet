services:

  auth-db:
    image: postgres:15-alpine
    container_name: paritet-auth-db
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - ./apps/auth-service/.env
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-user} -d ${AUTH_DB_NAME:-auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - paritet-network

  kafka: 
    image: wurstmeister/kafka
    container_name: paritet-kafka-1 
    ports:
      - "9092:9092"
    environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    networks:
      - paritet-network


  nginx:
    image: nginx:latest # Используем готовый образ, не пересобираем каждый раз
    container_name: paritet-nginx-dev
    ports:
      - "80:80"
    volumes:
    # Монтируем ваш dev конфиг Nginx из вашей локальной системы в контейнер Nginx
    # Убедитесь, что путь './tooling/configs/nginx/dev.conf' верен.
    # Он должен быть смонтирован в /etc/nginx/conf.d/ (это стандартное место для конфигов)
    - ./tooling/configs/nginx/conf.d/:/etc/nginx/conf.d/:ro # Один главный файл для dev
      # Если нужно монтировать отдельные файлы, то так:
      # - ./tooling/configs/nginx/dev/frontend.conf:/etc/nginx/conf.d/frontend.conf:ro
      # - ./tooling/configs/nginx/dev/specialist.conf:/etc/nginx/conf.d/specialist.conf:ro
      # ... и так для всех сервисов.
    build:
      context: . # Корневая папка проекта
      dockerfile: tooling/docker/nginx/Dockerfile.dev 
    networks:
      - paritet-network
    

networks:
  paritet-network:
    driver: bridge

volumes:
  auth-db-data:
  kafka-data:


































# services:
#   postgres:
#     image: postgres:17.5
#     restart: always
#     environment:
#       POSTGRES_USER: fvst
#       POSTGRES_PASSWORD: fvst
#       POSTGRES_DB: fvst
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - paritet_network

#   redis:
#     image: redis:7.4.1-alpine
#     restart: always
#     ports:
#       - "6379:6379"
#     command: redis-server --save 20 1 --loglevel warning
#     volumes:
#       - redis_data:/data
#     networks:
#       - paritet_network

#   mongo:
#     image: mongo:8.0
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - paritet_network

# volumes:
#   postgres_data:
#   redis_data:
#   mongo_data:

# networks:
#   paritet_network:
#     driver: bridge
