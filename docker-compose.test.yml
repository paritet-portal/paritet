services:

  # --- –ù–û–í–ê, –ü–†–ê–í–ò–õ–¨–ù–ê –í–ï–†–°–Ü–Ø ---
auth-service:
  container_name: paritet-auth-service
  # üëá –í–∫–∞–∑—É—î–º–æ –Ω–∞–∑–≤—É —Ç–∞ —Ç–µ–≥ –æ–±—Ä–∞–∑—É, —è–∫–∏–π –º–∏ –∑—ñ–±—Ä–∞–ª–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ `nx docker-build`
  image: paritet/auth-service:latest 
  restart: always # –î–æ–¥–∞–º–æ –ø–æ–ª—ñ—Ç–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
  ports:
    - "3334:3333"
  env_file:
    - ./apps/auth-service/.env # –ó–∞–ª–∏—à–∞—î–º–æ, —â–æ–± –ø–µ—Ä–µ–¥–∞—Ç–∏ —Å–µ–∫—Ä–µ—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  environment:
    - NODE_ENV=production
    - PORT=3333 # –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –ø–æ—Ä—Ç, —è–∫–∏–π —Å–ª—É—Ö–∞—î NestJS
  depends_on:
    auth-db:
      condition: service_healthy # –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è
  networks:
    - paritet-network


  auth-db:
    image: postgres:15-alpine
    container_name: paritet-auth-db
    restart: always
    ports:
      - "5433:5432" # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç:–ø–æ—Ä—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    env_file:
      - ./apps/auth-service/.env # –ò—Å–ø–æ–ª—å–∑—É–µ–º env_file –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
    volumes:
      - prod-auth-db-data:/var/lib/postgresql/data # –¢–æ–º –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-user} -d ${AUTH_DB_NAME:-auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paritet-network

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: paritet-zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - paritet-network

  kafka:
    image: wurstmeister/kafka
    container_name: paritet-kafka-1
    ports:
      - "9092:9092"
    environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ Zookeeper –≤ —Å–µ—Ç–∏ Docker
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 # –£–∫–∞–∂–∏—Ç–µ localhost, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∏–∑–≤–Ω–µ
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    networks:
      - paritet-network

  nginx:
    build:
      context: . # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
      dockerfile: tooling/docker/nginx/Dockerfile # –ü—É—Ç—å –∫ Dockerfile Nginx
    container_name: paritet-nginx-proxy
    ports:
      - "80:80" # –ü–æ—Ä—Ç 80 –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ –≤–∞—à–µ–π –º–∞—à–∏–Ω—ã
      # - "443:443" # –î–ª—è HTTPS, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # –£–î–ê–õ–ò–¢–ï —Å—Ç—Ä–æ–∫–∏ volumes, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–≥–∏ Nginx –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –≤ –æ–±—Ä–∞–∑ –∏–∑ tooling/docker/nginx/
    # volumes:
    #   - ./tooling/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    #   - ./tooling/configs/nginx/conf.d/:/etc/nginx/conf.d/:ro
    depends_on:
      # Nginx –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã
      - frontend-service
      - specialist-frontend-service
      - client-frontend-service
      # - admin-panel-frontend # –ï—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏—Ç–µ –µ–≥–æ –≤ docker-compose
      - api-gateway
      - auth-service
      - kafka # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–≤–∏—Å—è—Ç –æ—Ç Kafka
    networks:
      - paritet-network

volumes:
  prod-auth-db-data:
  prod-kafka-data:

networks:
  paritet-network:
    driver: bridge








































# services:
  # ----------------------------------
  #       –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞)
  # ----------------------------------
  # admin:
   
  #   build:
  #     context: . 
  #     dockerfile: tooling/docker/next/Dockerfile 
  #     args: 
  #       APP_NAME: admin
  #   image: paritet/admin:local
  #   restart: always
  #   ports:
  #     - "3001:3050"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/admin/.env
  #   networks:
  #     - paritet_network

  # frontend-service:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/next/Dockerfile
  #     args:
  #       APP_NAME: frontend-service
  #   image: paritet/frontend-service:local
  #   restart: always
  #   ports:
  #     - "3002:3200"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/frontend-service/.env
  #   networks:
  #     - paritet_network

  # chat:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: chat
  #       APP_SCOPE: chat
  #   image: paritet/chat:local
  #   restart: always
  #   ports:
  #     - "5004:5002"
  #   depends_on:
  #     - mongo # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ mongo –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –ø–µ—Ä–µ–¥ chat
  #   environment:
  #     - NODE_ENV=production
  #     - CHAT_MONGODB_URI=mongodb://root:example@mongo:27017/chat_db_from_seed?authSource=admin
  #   env_file:
  #     - ./apps/chat/.env
  #   networks:
  #     - paritet_network

  # demo-worker:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: demo-worker
  #       APP_SCOPE: demo-worker
  #   image: paritet/demo-worker:local
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/demo-worker/.env
  #   depends_on:
  #     - redis
  #   networks:
  #     - paritet_network

  # service-gateway:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: service-gateway
  #       APP_SCOPE: service-gateway
  #   image: paritet/service-gateway:local
  #   restart: always
  #   ports:
  #     - "4500:4500"
  #   env_file:
  #     - ./apps/service-gateway/.env
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     - postgres
  #   networks:
  #     - paritet_network


  # backend:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: backend
  #       APP_SCOPE: backend
  #   image: paritet/backend:local
  #   restart: always
  #   ports:
  #     - "5003:5003"
  #   depends_on:
  #     - postgres
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://fvst:fvst@postgres:5432/fvst?schema=user
  #   env_file:
  #     - ./apps/backend/.env
  #   networks:
  #     - paritet_network

  # ----------------------------------
  #       –ë–ê–ó–´ –î–ê–ù–ù–´–• (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  # ----------------------------------
#   postgres:
#     image: postgres:17.5
#     restart: always
#     environment:
#       POSTGRES_USER: fvst
#       POSTGRES_PASSWORD: fvst
#       POSTGRES_DB: fvst
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - paritet_network

#   redis:
#     image: redis:7.4.1-alpine
#     restart: always
#     ports:
#       - "6379:6379"
#     command: redis-server --save 20 1 --loglevel warning
#     volumes:
#       - redis_data:/data
#     networks:
#       - paritet_network

#   mongo:
#     image: mongo:8.0
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - paritet_network

# # ----------------------------------
# #       –¢–û–ú–ê –ò –°–ï–¢–ò
# # ----------------------------------
# volumes:
#   postgres_data:
#   redis_data:
#   mongo_data:

# networks:
#   paritet_network:
#     driver: bridge


