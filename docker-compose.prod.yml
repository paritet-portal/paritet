services:

  frontend-service:
    build:
      context: .
      dockerfile: tooling/docker/next/Dockerfile
      args:
        APP_NAME: frontend-service
    image: paritet/frontend-service:local
    restart: always
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    env_file:
      - ./apps/frontend-service/.env
    networks:
      - paritet-network

  specialist-frontend-service:
    build:
      context: .
      dockerfile: tooling/docker/next/Dockerfile
      args:
        APP_NAME: specialist-frontend-service
    restart: always
    ports:
      - "3001:3000" # Порт, на котором Next.js слушает внутри контейнера
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # - API_URL=http://api-gateway:3333
    networks:
      - paritet-network


  client-frontend-service:
    build:
      context: .
      dockerfile: tooling/docker/next/Dockerfile
      args:
        APP_NAME: client-frontend-service
    restart: always
    ports:
      - "3002:3000" # Порт, на котором Next.js слушает внутри контейнера
    environment:
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
      # - API_URL=http://api-gateway:3333
    networks:
      - paritet-network

  client-profile-service:
    container_name: paritet-client-profile-service
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: client-profile-service
    restart: always
    ports:
      - "3336:3333" 
    env_file:
      - ./apps/client-profile-service/.env
    environment:
      - NODE_ENV=production
      - PORT=3333 
    depends_on:
      client-profile-db:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - paritet-network


  auth-service:
    container_name: paritet-auth-service
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: auth-service
    ports:
      - "3334:3333" # Порт, на котором NestJS слушает внутри контейнера (проверьте порт!)
    env_file:
      - ./apps/auth-service/.env
    environment:
      - NODE_ENV=production
      - PORT=3333 # Указываем порт, который слушает приложение внутри контейнера
      # Убедитесь, что DATABASE_URL здесь ссылается на auth-db сервис правильно
      # Пример: DATABASE_URL=postgresql://user:password@auth-db:5432/auth_db
      # Если в вашем .env уже есть DATABASE_URL, то этот env_file должен его подставить.
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - paritet-network

  translation-service:
    container_name: paritet-translation-service
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: translation-service
    ports:
      - "3335:3333"  
    env_file:
      - ./apps/translation-service/.env
    environment:
      - NODE_ENV=production
      - PORT=3333
    depends_on:
      translation-db:
        condition: service_healthy
    networks:
      - paritet-network

  api-gateway:
    container_name: paritet-api-gateway
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: api-gateway
    ports:
      - "3333:3333" # Порт, на котором NestJS слушает внутри контейнера (проверьте порт!)
    env_file:
      - ./apps/api-gateway/.env
    environment:
      - NODE_ENV=production
      - PORT=3333 # Указываем порт, который слушает приложение внутри контейнера
      # Убедитесь, что здесь есть нужные переменные окружения, например, для подключения к другим сервисам или БД
      # - AUTH_SERVICE_URL=http://auth-service:3334
    depends_on:
      - auth-service # Зависит от сервиса аутентификации
      - auth-db    # Зависит от базы данных аутентификации
      - translation-service
      - translation-db
      # Добавьте зависимости от Kafka, если api-gateway его использует
    networks:
      - paritet-network

  auth-db:
    image: postgres:15-alpine
    container_name: paritet-auth-db
    restart: always
    ports:
      - "5433:5432" # Локальный порт:порт в контейнере
    env_file:
      - ./apps/auth-service/.env # Используем env_file для настроек БД
    volumes:
      - prod-auth-db-data:/var/lib/postgresql/data # Том для персистентности данных
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-user} -d ${AUTH_DB_NAME:-auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paritet-network

  client-profile-db:
    image: postgres:15-alpine
    container_name: paritet-client-profile-db
    restart: always
    ports:
      - "5435:5432"
    env_file:
      - ./apps/client-profile-service/.env
    volumes:
      - prod-client-profile-db-data:/var/lib/postgresql/data 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paritet-network

  translation-db:
    image: postgres:15-alpine
    container_name: paritet-translation-db
    restart: always
    ports:
      - "5434:5432"
    env_file:
      - ./apps/translation-service/.env
    volumes:
      - prod-translation-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - paritet-network


  zookeeper:
    image: wurstmeister/zookeeper
    container_name: paritet-zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - paritet-network

  kafka:
    image: wurstmeister/kafka
    container_name: paritet-kafka-1
    ports:
      - "9092:9092"
    environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Имя сервиса Zookeeper в сети Docker
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 # Укажите localhost, если хотите обращаться извне
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    networks:
      - paritet-network

  nginx:
    build:
      context: . # Корневая папка проекта
      dockerfile: tooling/docker/nginx/Dockerfile # Путь к Dockerfile Nginx
    container_name: paritet-nginx-proxy
    ports:
      - "80:80" # Порт 80 будет доступен извне вашей машины
      # - "443:443" # Для HTTPS, если нужно
    # УДАЛИТЕ строки volumes, так как конфиги Nginx копируются в образ из tooling/docker/nginx/
    # volumes:
    #   - ./tooling/configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    #   - ./tooling/configs/nginx/conf.d/:/etc/nginx/conf.d/:ro
    depends_on:
      # Nginx должен стартовать после того, как остальные сервисы будут готовы
      - frontend-service
      - specialist-frontend-service
      - client-frontend-service
      # - admin-panel-frontend # Если вы добавите его в docker-compose
      - api-gateway
      - auth-service
      - kafka # Если приложения зависят от Kafka
    networks:
      - paritet-network

volumes:
  prod-auth-db-data:
  prod-client-profile-db-data:
  prod-translation-db-data:
  prod-kafka-data:

networks:
  paritet-network:
    driver: bridge








































# services:
  # ----------------------------------
  #       ПРИЛОЖЕНИЯ (локальная сборка)
  # ----------------------------------
  # admin:
   
  #   build:
  #     context: . 
  #     dockerfile: tooling/docker/next/Dockerfile 
  #     args: 
  #       APP_NAME: admin
  #   image: paritet/admin:local
  #   restart: always
  #   ports:
  #     - "3001:3050"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/admin/.env
  #   networks:
  #     - paritet_network

  # frontend-service:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/next/Dockerfile
  #     args:
  #       APP_NAME: frontend-service
  #   image: paritet/frontend-service:local
  #   restart: always
  #   ports:
  #     - "3002:3200"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/frontend-service/.env
  #   networks:
  #     - paritet_network

  # chat:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: chat
  #       APP_SCOPE: chat
  #   image: paritet/chat:local
  #   restart: always
  #   ports:
  #     - "5004:5002"
  #   depends_on:
  #     - mongo # Гарантирует, что mongo запустится перед chat
  #   environment:
  #     - NODE_ENV=production
  #     - CHAT_MONGODB_URI=mongodb://root:example@mongo:27017/chat_db_from_seed?authSource=admin
  #   env_file:
  #     - ./apps/chat/.env
  #   networks:
  #     - paritet_network

  # demo-worker:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: demo-worker
  #       APP_SCOPE: demo-worker
  #   image: paritet/demo-worker:local
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/demo-worker/.env
  #   depends_on:
  #     - redis
  #   networks:
  #     - paritet_network

  # service-gateway:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: service-gateway
  #       APP_SCOPE: service-gateway
  #   image: paritet/service-gateway:local
  #   restart: always
  #   ports:
  #     - "4500:4500"
  #   env_file:
  #     - ./apps/service-gateway/.env
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     - postgres
  #   networks:
  #     - paritet_network


  # backend:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: backend
  #       APP_SCOPE: backend
  #   image: paritet/backend:local
  #   restart: always
  #   ports:
  #     - "5003:5003"
  #   depends_on:
  #     - postgres
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://fvst:fvst@postgres:5432/fvst?schema=user
  #   env_file:
  #     - ./apps/backend/.env
  #   networks:
  #     - paritet_network

  # ----------------------------------
  #       БАЗЫ ДАННЫХ (остаются без изменений)
  # ----------------------------------
#   postgres:
#     image: postgres:17.5
#     restart: always
#     environment:
#       POSTGRES_USER: fvst
#       POSTGRES_PASSWORD: fvst
#       POSTGRES_DB: fvst
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - paritet_network

#   redis:
#     image: redis:7.4.1-alpine
#     restart: always
#     ports:
#       - "6379:6379"
#     command: redis-server --save 20 1 --loglevel warning
#     volumes:
#       - redis_data:/data
#     networks:
#       - paritet_network

#   mongo:
#     image: mongo:8.0
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - paritet_network

# # ----------------------------------
# #       ТОМА И СЕТИ
# # ----------------------------------
# volumes:
#   postgres_data:
#   redis_data:
#   mongo_data:

# networks:
#   paritet_network:
#     driver: bridge


