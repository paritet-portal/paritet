services:
  frontend-service:
    build:
      context: .
      dockerfile: tooling/docker/next/Dockerfile
      args:
        APP_NAME: frontend-service
    image: paritet/frontend-service:local
    restart: always
    ports:
      - "3002:3200"
    environment:
      - NODE_ENV=production
    env_file:
      - ./apps/frontend-service/.env
    networks:
      - paritet-network

  auth-service:
    container_name: paritet-auth-service
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: auth-service

    ports:
      - "3001:3000"
    env_file:
      - ./apps/auth-service/.env
    depends_on:
      auth-db:
        condition: service_healthy
    networks:
      - paritet-network

  api-gateway:
    container_name: paritet-api-gateway
    build:
      context: .
      dockerfile: tooling/docker/nest/Dockerfile
      args:
        APP_NAME: api-gateway
    ports:
      - "3000:3000"
    env_file:
      - ./apps/api-gateway/.env
    depends_on:
      - auth-service
    networks:
      - paritet-network

  auth-db:
    image: postgres:15-alpine
    container_name: paritet-auth-db
    restart: always
    ports:
      - "5433:5432"
    env_file:
      - ./apps/auth-service/.env
    volumes:
      - prod-auth-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AUTH_DB_USER:-user} -d ${AUTH_DB_NAME:-auth_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    networks:
      - paritet-network

  kafka: 
    image: wurstmeister/kafka
    container_name: paritet-kafka-1 
    ports:
      - "9092:9092"
    environment:
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    networks:
      - paritet-network

networks:
  paritet-network:
    driver: bridge

volumes:
  prod-auth-db-data:
  prod-kafka-data:








































# services:
  # ----------------------------------
  #       ПРИЛОЖЕНИЯ (локальная сборка)
  # ----------------------------------
  # admin:
   
  #   build:
  #     context: . 
  #     dockerfile: tooling/docker/next/Dockerfile 
  #     args: 
  #       APP_NAME: admin
  #   image: paritet/admin:local
  #   restart: always
  #   ports:
  #     - "3001:3050"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/admin/.env
  #   networks:
  #     - paritet_network

  # frontend-service:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/next/Dockerfile
  #     args:
  #       APP_NAME: frontend-service
  #   image: paritet/frontend-service:local
  #   restart: always
  #   ports:
  #     - "3002:3200"
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/frontend-service/.env
  #   networks:
  #     - paritet_network

  # chat:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: chat
  #       APP_SCOPE: chat
  #   image: paritet/chat:local
  #   restart: always
  #   ports:
  #     - "5004:5002"
  #   depends_on:
  #     - mongo # Гарантирует, что mongo запустится перед chat
  #   environment:
  #     - NODE_ENV=production
  #     - CHAT_MONGODB_URI=mongodb://root:example@mongo:27017/chat_db_from_seed?authSource=admin
  #   env_file:
  #     - ./apps/chat/.env
  #   networks:
  #     - paritet_network

  # demo-worker:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: demo-worker
  #       APP_SCOPE: demo-worker
  #   image: paritet/demo-worker:local
  #   restart: always
  #   environment:
  #     - NODE_ENV=production
  #   env_file:
  #     - ./apps/demo-worker/.env
  #   depends_on:
  #     - redis
  #   networks:
  #     - paritet_network

  # service-gateway:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: service-gateway
  #       APP_SCOPE: service-gateway
  #   image: paritet/service-gateway:local
  #   restart: always
  #   ports:
  #     - "4500:4500"
  #   env_file:
  #     - ./apps/service-gateway/.env
  #   environment:
  #     - NODE_ENV=production
  #   depends_on:
  #     - postgres
  #   networks:
  #     - paritet_network


  # backend:
  #   build:
  #     context: .
  #     dockerfile: tooling/docker/nest/Dockerfile
  #     args:
  #       APP_NAME: backend
  #       APP_SCOPE: backend
  #   image: paritet/backend:local
  #   restart: always
  #   ports:
  #     - "5003:5003"
  #   depends_on:
  #     - postgres
  #   environment:
  #     - NODE_ENV=production
  #     - DATABASE_URL=postgresql://fvst:fvst@postgres:5432/fvst?schema=user
  #   env_file:
  #     - ./apps/backend/.env
  #   networks:
  #     - paritet_network

  # ----------------------------------
  #       БАЗЫ ДАННЫХ (остаются без изменений)
  # ----------------------------------
#   postgres:
#     image: postgres:17.5
#     restart: always
#     environment:
#       POSTGRES_USER: fvst
#       POSTGRES_PASSWORD: fvst
#       POSTGRES_DB: fvst
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#     ports:
#       - "5432:5432"
#     networks:
#       - paritet_network

#   redis:
#     image: redis:7.4.1-alpine
#     restart: always
#     ports:
#       - "6379:6379"
#     command: redis-server --save 20 1 --loglevel warning
#     volumes:
#       - redis_data:/data
#     networks:
#       - paritet_network

#   mongo:
#     image: mongo:8.0
#     restart: always
#     environment:
#       MONGO_INITDB_ROOT_USERNAME: root
#       MONGO_INITDB_ROOT_PASSWORD: example
#     ports:
#       - "27017:27017"
#     volumes:
#       - mongo_data:/data/db
#     networks:
#       - paritet_network

# # ----------------------------------
# #       ТОМА И СЕТИ
# # ----------------------------------
# volumes:
#   postgres_data:
#   redis_data:
#   mongo_data:

# networks:
#   paritet_network:
#     driver: bridge


